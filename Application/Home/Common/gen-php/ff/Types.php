<?php
namespace ff;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


class game_info_t {
  static $_TSPEC;

  public $game_id = 0;
  public $name = null;
  public $area_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'game_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'area_list',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['game_id'])) {
        $this->game_id = $vals['game_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['area_list'])) {
        $this->area_list = $vals['area_list'];
      }
    }
  }

  public function getName() {
    return 'game_info_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->game_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->area_list = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = '';
              $xfer += $input->readI32($key5);
              $xfer += $input->readString($val6);
              $this->area_list[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('game_info_t');
    if ($this->game_id !== null) {
      $xfer += $output->writeFieldBegin('game_id', TType::I32, 1);
      $xfer += $output->writeI32($this->game_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area_list !== null) {
      if (!is_array($this->area_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('area_list', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->area_list));
        {
          foreach ($this->area_list as $kiter7 => $viter8)
          {
            $xfer += $output->writeI32($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class game_summary_info_t {
  static $_TSPEC;

  public $game_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'game_info',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\ff\game_info_t',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['game_info'])) {
        $this->game_info = $vals['game_info'];
      }
    }
  }

  public function getName() {
    return 'game_summary_info_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->game_info = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = 0;
              $val15 = new \ff\game_info_t();
              $xfer += $input->readI32($key14);
              $val15 = new \ff\game_info_t();
              $xfer += $val15->read($input);
              $this->game_info[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('game_summary_info_t');
    if ($this->game_info !== null) {
      if (!is_array($this->game_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('game_info', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->game_info));
        {
          foreach ($this->game_info as $kiter16 => $viter17)
          {
            $xfer += $output->writeI32($kiter16);
            $xfer += $viter17->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class process_info_t {
  static $_TSPEC;

  public $name = null;
  public $server_type = 0;
  public $param = null;
  public $status = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'server_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'param',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['server_type'])) {
        $this->server_type = $vals['server_type'];
      }
      if (isset($vals['param'])) {
        $this->param = $vals['param'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'process_info_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->server_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->param = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = '';
              $val24 = '';
              $xfer += $input->readString($key23);
              $xfer += $input->readString($val24);
              $this->param[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('process_info_t');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->server_type !== null) {
      $xfer += $output->writeFieldBegin('server_type', TType::I32, 2);
      $xfer += $output->writeI32($this->server_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param !== null) {
      if (!is_array($this->param)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('param', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->param));
        {
          foreach ($this->param as $kiter25 => $viter26)
          {
            $xfer += $output->writeString($kiter25);
            $xfer += $output->writeString($viter26);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class instance_info_t {
  static $_TSPEC;

  public $area_id = 0;
  public $area_name = null;
  public $process_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'area_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'area_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'process_list',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\ff\process_info_t',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['area_id'])) {
        $this->area_id = $vals['area_id'];
      }
      if (isset($vals['area_name'])) {
        $this->area_name = $vals['area_name'];
      }
      if (isset($vals['process_list'])) {
        $this->process_list = $vals['process_list'];
      }
    }
  }

  public function getName() {
    return 'instance_info_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->area_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->area_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->process_list = array();
            $_size27 = 0;
            $_ktype28 = 0;
            $_vtype29 = 0;
            $xfer += $input->readMapBegin($_ktype28, $_vtype29, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $key32 = 0;
              $val33 = new \ff\process_info_t();
              $xfer += $input->readI32($key32);
              $val33 = new \ff\process_info_t();
              $xfer += $val33->read($input);
              $this->process_list[$key32] = $val33;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('instance_info_t');
    if ($this->area_id !== null) {
      $xfer += $output->writeFieldBegin('area_id', TType::I32, 1);
      $xfer += $output->writeI32($this->area_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area_name !== null) {
      $xfer += $output->writeFieldBegin('area_name', TType::STRING, 2);
      $xfer += $output->writeString($this->area_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->process_list !== null) {
      if (!is_array($this->process_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('process_list', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->process_list));
        {
          foreach ($this->process_list as $kiter34 => $viter35)
          {
            $xfer += $output->writeI32($kiter34);
            $xfer += $viter35->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class process_cmd_req_t {
  static $_TSPEC;

  public $cmd = null;
  public $process_name = null;
  public $config = null;
  public $param = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cmd',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'process_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'config',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'param',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cmd'])) {
        $this->cmd = $vals['cmd'];
      }
      if (isset($vals['process_name'])) {
        $this->process_name = $vals['process_name'];
      }
      if (isset($vals['config'])) {
        $this->config = $vals['config'];
      }
      if (isset($vals['param'])) {
        $this->param = $vals['param'];
      }
    }
  }

  public function getName() {
    return 'process_cmd_req_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->process_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->config);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->param = array();
            $_size36 = 0;
            $_ktype37 = 0;
            $_vtype38 = 0;
            $xfer += $input->readMapBegin($_ktype37, $_vtype38, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $key41 = '';
              $val42 = '';
              $xfer += $input->readString($key41);
              $xfer += $input->readString($val42);
              $this->param[$key41] = $val42;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('process_cmd_req_t');
    if ($this->cmd !== null) {
      $xfer += $output->writeFieldBegin('cmd', TType::STRING, 1);
      $xfer += $output->writeString($this->cmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->process_name !== null) {
      $xfer += $output->writeFieldBegin('process_name', TType::STRING, 2);
      $xfer += $output->writeString($this->process_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->config !== null) {
      $xfer += $output->writeFieldBegin('config', TType::STRING, 3);
      $xfer += $output->writeString($this->config);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param !== null) {
      if (!is_array($this->param)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('param', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->param));
        {
          foreach ($this->param as $kiter43 => $viter44)
          {
            $xfer += $output->writeString($kiter43);
            $xfer += $output->writeString($viter44);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class process_cmd_ret_t {
  static $_TSPEC;

  public $ret_code = 0;
  public $output_msg = null;
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'output_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'info',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret_code'])) {
        $this->ret_code = $vals['ret_code'];
      }
      if (isset($vals['output_msg'])) {
        $this->output_msg = $vals['output_msg'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'process_cmd_ret_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->output_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->info = array();
            $_size45 = 0;
            $_ktype46 = 0;
            $_vtype47 = 0;
            $xfer += $input->readMapBegin($_ktype46, $_vtype47, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $key50 = '';
              $val51 = '';
              $xfer += $input->readString($key50);
              $xfer += $input->readString($val51);
              $this->info[$key50] = $val51;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('process_cmd_ret_t');
    if ($this->ret_code !== null) {
      $xfer += $output->writeFieldBegin('ret_code', TType::I32, 1);
      $xfer += $output->writeI32($this->ret_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->output_msg !== null) {
      $xfer += $output->writeFieldBegin('output_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->output_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      if (!is_array($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->info));
        {
          foreach ($this->info as $kiter52 => $viter53)
          {
            $xfer += $output->writeString($kiter52);
            $xfer += $output->writeString($viter53);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


